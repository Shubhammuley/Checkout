{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/ui/form/TextArea.tsx","webpack://checkout/./src/app/ui/toggle/Toggle.tsx","webpack://checkout/./src/app/formFields/mapCustomFormFieldsFromFormValues.ts","webpack://checkout/./src/app/common/utility/parseAnchor.ts","webpack://checkout/./src/app/locale/withDate.tsx","webpack://checkout/./src/app/ui/form/RadioInput.tsx","webpack://checkout/./src/app/ui/form/DynamicInput.tsx","webpack://checkout/./src/app/ui/form/MultiCheckboxControl.tsx","webpack://checkout/./src/app/ui/form/CheckboxGroupFormField.tsx","webpack://checkout/./src/app/ui/form/DynamicFormField.tsx","webpack://checkout/./src/app/locale/TranslatedLink.tsx","webpack://checkout/./src/app/customer/mapCreateAccountFromFormValues.ts","webpack://checkout/./src/app/customer/validationPatterns.ts","webpack://checkout/./src/app/customer/getEmailValidationSchema.ts","webpack://checkout/./src/app/customer/getCreateCustomerValidationSchema.ts","webpack://checkout/./src/app/customer/CreateAccountForm.tsx","webpack://checkout/./src/app/customer/EmailField.tsx","webpack://checkout/./src/app/customer/EmailLoginForm.tsx","webpack://checkout/./src/app/customer/GuestForm.tsx","webpack://checkout/./src/app/privacyPolicy/getPrivacyPolicyValidationSchema.ts","webpack://checkout/./src/app/ui/icon/IconEye.tsx","webpack://checkout/./src/app/ui/icon/IconEyeSlash.tsx","webpack://checkout/./src/app/customer/PasswordField.tsx","webpack://checkout/./src/app/customer/LoginForm.tsx","webpack://checkout/./src/app/customer/mapErrorMessage.ts","webpack://checkout/./src/app/customer/Customer.tsx"],"names":["CheckboxInput","ref","additionalClassName","label","id","rest","className","type","htmlFor","TextArea","testId","props","toggle","event","isOpen","state","preventDefault","setState","openByDefault","render","children","this","mapCustomFormFieldsFromFormValues","customFieldsObject","customFields","value","key","fieldValue","padMonth","getMonth","toString","padDay","getDate","getFullYear","push","fieldId","parseAnchor","text","div","document","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","createInjectHoc","LocaleContext","displayNamePrefix","pickProps","checked","Input","Label","date","fieldType","name","onChange","options","placeholder","inputFormat","handleDateChange","dateValue","target","DynamicFormFieldType","dropdown","map","optionValue","radio","length","checkbox","Array","isArray","includes","autoComplete","calendarClassName","dateFormat","maxDate","max","Date","undefined","minDate","min","placeholderText","toUpperCase","popperClassName","selected","multiline","TextInput","password","onSelectedAll","onSelectedNone","handleSelectAllClick","handleSelectNoneClick","TranslatedString","href","onClick","MultiCheckboxFormField","form","values","errors","remove","handleSelectAll","checkedValues","forEach","val","handleSelectNone","handleInputChange","indexOf","FormFieldContainer","hasError","FormFieldError","renderField","renderProps","field","secret","fieldLabel","required","maxLength","parentFieldName","inputId","autocomplete","extraClass","fieldInputId","fieldName","labelComponent","dynamicFormFieldType","number","renderInput","items","helperLabel","rows","FormField","input","data","language","translatedString","translate","parsedString","mapCreateAccountFromFormValues","acceptsMarketingEmails","EMAIL_REGEXP","getEmailValidationSchema","email","matches","getTranslateCreateCustomerError","formFields","passwordRequirements","description","numeric","alpha","minLength","firstName","lastName","concat","getCustomFormFieldsValidationSchema","withLanguage","handleSubmit","onSubmit","mapPropsToValues","validationSchema","find","requirements","Error","getPasswordRequirements","createAccountError","isCreatingAccount","onCancel","createAccountErrorMessage","isRequestError","status","splitMessage","message","trim","Form","Fieldset","Alert","DynamicFormField","custom","Button","disabled","variant","Primary","labelContent","onSendLoginEmail","isSendingEmail","emailHasBeenRequested","onRequestClose","sentEmailError","sentEmail","submitForm","formEmail","modalHeaderStringId","okButton","footer","LoadingSpinner","isLoading","sent_email","TranslatedLink","error","expiry","TranslatedHtml","minutes","Math","round","Modal","additionalBodyClassName","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","defaultShouldSubscribe","shouldSubscribe","privacyPolicy","onContinueAsGuest","privacyPolicyUrl","baseSchema","isRequired","schemaFields","oneOf","getPrivacyPolicyValidationSchema","checkoutButtons","continueAsGuestButtonLabelId","onChangeEmail","legend","Legend","hidden","style","display","withIconContainer","viewBox","xmlns","d","forgotPasswordUrl","Toggle","rel","onSignIn","canCancel","isSignInEmailEnabled","isSigningIn","onCreateAccount","signInError","shouldShowCreateAccountLink","viewType","CustomerViewType","Login","changeEmailLink","body","mapErrorMessage","SuggestedLogin","Info","CancellableEnforcedLogin","EnforcedLogin","isEmailLoginFormOpen","isReady","hasRequestedLoginEmail","closeEmailLoginFormForm","handleEmailLoginClicked","draftEmail","handleSendLoginEmail","sendLoginEmail","handleContinueAsGuest","formValues","canSubscribe","continueAsGuest","onChangeViewType","onContinueAsGuestError","acceptsMarketingNewsletter","acceptsAbandonedCartEmails","customer","getCustomer","shouldEncourageSignIn","isGuest","executePaymentMethodCheckoutOrContinue","handleSignIn","credentials","signIn","onSignInError","handleCreateAccount","createAccount","onAccountCreated","showCreateAccount","CreateAccount","handleCancelCreateAccount","clearError","handleCancelSignIn","Guest","handleChangeEmail","handleShowLogin","executePaymentMethodCheckout","providerWithCustomCheckout","methodId","continueWithCheckoutCallback","componentDidMount","initializeCustomer","onReady","onUnhandledError","componentWillUnmount","deinitializeCustomer","shouldRenderGuestForm","shouldRenderCreateAccountForm","shouldRenderLoginForm","LoadingOverlay","unmountContentWhenLoading","renderEmailLoginLinkForm","renderLoginForm","renderGuestForm","renderCreateAccountForm","checkEmbeddedSupport","checkoutButtonIds","isContinuingAsGuest","isExecutingPaymentMethodCheckout","isInitializing","requiresMarketingConsent","CheckoutButtonList","deinitialize","initialize","methodIds","onError","onShowLogin","isSendingSignInEmail","signInEmailError","signInEmail","customerAccountFields","isEmbedded","isGuestEnabled","isAccountCreationEnabled","mapToWithCheckoutCustomerProps","checkoutService","checkoutState","getBillingAddress","getCustomerAccountFields","getCheckout","getSignInEmail","getConfig","getSignInError","getSignInEmailError","getCreateCustomerAccountError","isInitializingCustomer","isCreatingCustomerAccount","billingAddress","checkout","config","shopperConfig","showNewsletterSignup","checkoutSettings","remoteCheckoutProviders","createCustomerAccount","sendSignInEmail","defaultNewsletterSignup","links","forgotPasswordLink","guestCheckoutEnabled","signInCustomer","withCheckout"],"mappings":"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","file":"customer-d26cf1da.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"checkbox\"\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef((\n    { additionalClassName, testId, className, ...rest }: TextAreaProps,\n    ref: Ref<HTMLTextAreaElement>\n) => (\n    <textarea\n        { ...rest }\n        className={ className || classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            additionalClassName\n        ) }\n        data-test={ testId }\n        ref={ ref }\n    />\n));\n\nexport default TextArea;\n","import { Component, ReactNode } from 'react';\n\nexport interface ToggleProps {\n    openByDefault?: boolean;\n    children(props: any): ReactNode;\n}\n\nexport interface ToggleState {\n    isOpen: boolean;\n}\n\nexport default class Toggle extends Component<ToggleProps, ToggleState> {\n    constructor(props: ToggleProps) {\n        super(props);\n\n        this.state = { isOpen: !!props.openByDefault };\n    }\n\n    render(): ReactNode {\n        const { children } = this.props;\n        const { isOpen } = this.state;\n\n        return children({\n            isOpen,\n            toggle: this.toggle,\n        });\n    }\n\n    private toggle: (event: Event) => void = event => {\n        const { isOpen } = this.state;\n\n        event.preventDefault();\n\n        this.setState({ isOpen: !isOpen });\n    };\n}\n","import { forIn, isDate, padStart } from 'lodash';\n\nexport default function mapCustomFormFieldsFromFormValues(\n    customFieldsObject: { [id: string]: any }\n): Array<{fieldId: string; fieldValue: string}> {\n    const customFields: Array<{fieldId: string; fieldValue: string}> = [];\n    forIn(customFieldsObject, (value, key) => {\n        let fieldValue: string;\n\n        if (isDate(value)) {\n            const padMonth = padStart((value.getMonth() + 1).toString(), 2, '0');\n            const padDay = padStart((value.getDate()).toString(), 2, '0');\n            fieldValue = `${value.getFullYear()}-${padMonth}-${padDay}`;\n        } else {\n            fieldValue = value;\n        }\n\n        customFields.push({\n            fieldId: key,\n            fieldValue,\n        });\n    });\n\n    return customFields;\n}\n","export default function parseAnchor(text: string): string[] {\n    const div = document.createElement('div');\n    div.innerHTML = text;\n\n    const anchor = div.querySelector('a');\n\n    if (!anchor) {\n        return [];\n    }\n\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\n\n    return [ anchorSiblings[0], anchor.text, anchorSiblings[1] ];\n}\n","import { createInjectHoc, InjectHoc } from '../common/hoc';\n\nimport LocaleContext from './LocaleContext';\n\nexport interface WithDateProps {\n    date: {\n        inputFormat: string;\n    };\n}\n\nconst withDate: InjectHoc<WithDateProps> = createInjectHoc(LocaleContext, {\n    displayNamePrefix: 'withDate',\n    pickProps: (value, key) => key === 'date' && !!value,\n});\n\nexport default withDate;\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        value,\n        checked,\n        id,\n        ...rest\n    }: RadioInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            checked={ checked }\n            className={ classNames(\n                'form-radio',\n                'optimizedCheckout-form-radio',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"radio\"\n            value={ value }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default RadioInput;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { isDate, noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { withDate, WithDateProps } from '../../locale';\n\nimport CheckboxInput from './CheckboxInput';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport { InputProps } from './Input';\nimport RadioInput from './RadioInput';\nimport TextArea from './TextArea';\nimport TextInput from './TextInput';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps & WithDateProps> = ({\n    additionalClassName,\n    date,\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    ...rest\n}) => {\n    const { inputFormat } = date;\n    const handleDateChange = useCallback((dateValue, event) => onChange({\n        ...event,\n        target: {\n            name,\n            value: dateValue,\n        },\n    }), [\n        onChange,\n        name,\n    ]);\n\n    switch (fieldType) {\n    case DynamicFormFieldType.dropdown:\n        return (\n            <select\n                { ...rest as any }\n                className=\"form-select optimizedCheckout-form-select\"\n                data-test={ `${id}-select` }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                value={ value === null ? '' : value }\n            >\n                { placeholder &&\n                    <option value=\"\">\n                        { placeholder }\n                    </option> }\n                { options && options.map(({ label, value: optionValue }) =>\n                    <option\n                        key={ optionValue }\n                        value={ optionValue }\n                    >\n                        { label }\n                    </option>\n                ) }\n            </select>\n        );\n\n    case DynamicFormFieldType.radio:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <RadioInput\n                    { ...rest }\n                    checked={ optionValue === value }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-radio` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.checkbox:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <CheckboxInput\n                    { ...rest }\n                    checked={ Array.isArray(value) ? value.includes(optionValue) : false }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-checkbox` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.date:\n        return (\n            <ReactDatePicker\n                { ...rest as any }\n                autoComplete=\"off\"\n                // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                // onChangeRaw={ rest.onChange }\n                calendarClassName=\"optimizedCheckout-contentPrimary\"\n                className=\"form-input optimizedCheckout-form-input\"\n                dateFormat={ inputFormat }\n                maxDate={ rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined }\n                minDate={ rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined }\n                name={ name }\n                onChange={ handleDateChange }\n                placeholderText={ inputFormat.toUpperCase() }\n                popperClassName=\"optimizedCheckout-contentPrimary\"\n                selected={ isDate(value) ? value : undefined }\n            />\n        );\n\n    case DynamicFormFieldType.multiline:\n        return (\n            <TextArea\n                { ...rest as any }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-text` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n\n    default:\n        return (\n            <TextInput\n                { ...rest }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                placeholder={ placeholder }\n                testId={ `${id}-${ fieldType === DynamicFormFieldType.password ?\n                    'password' :\n                    'text' }` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n    }\n};\n\nexport default memo(withDate(DynamicInput));\n","import React, { memo, useCallback, FunctionComponent, MouseEvent } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedAll();\n    }, [onSelectedAll]);\n\n    const handleSelectNoneClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedNone();\n    }, [onSelectedNone]);\n\n    return <ul className=\"multiCheckbox--controls\">\n        <li className=\"multiCheckbox--control\">\n            <TranslatedString id=\"address.select\" />\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-all-button` }\n                href=\"#\"\n                onClick={ handleSelectAllClick }\n            >\n                <TranslatedString id=\"address.select_all\" />\n            </a>\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-none-button` }\n                href=\"#\"\n                onClick={ handleSelectNoneClick }\n            >\n                <TranslatedString id=\"address.select_none\" />\n            </a>\n        </li>\n    </ul>;\n};\n\nexport default memo(MultiCheckboxControl);\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { getIn, FieldArray, FieldArrayRenderProps } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { memo, useCallback, ChangeEvent, FunctionComponent, ReactNode } from 'react';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormFieldContainer from './FormFieldContainer';\nimport FormFieldError from './FormFieldError';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = (\n    CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>\n);\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(options.map(({ value }) => value), checkedValues)\n            .forEach(val => push(val));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        options,\n        push,\n        values,\n    ]);\n\n    const handleSelectNone = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => remove(0));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        remove,\n        values,\n    ]);\n\n    const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const checkedValues: string[] = getIn(values, name) || [];\n        const { value, checked } = event.target;\n\n        if (checked) {\n            push(value);\n        } else {\n            remove(checkedValues.indexOf(value));\n        }\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        push,\n        remove,\n        values,\n    ]);\n\n    return <FormFieldContainer hasError={ getIn(errors, name) && getIn(errors, name).length }>\n        { label }\n\n        { options.length > 1 && <MultiCheckboxControl\n            onSelectedAll={ handleSelectAll }\n            onSelectedNone={ handleSelectNone }\n            testId={ id }\n        /> }\n\n        <DynamicInput\n            fieldType={ DynamicFormFieldType.checkbox }\n            id={ id }\n            name={ name }\n            onChange={ handleInputChange }\n            options={ options }\n            value={ getIn(values, name) || [] }\n        />\n\n        <FormFieldError\n            name={ name }\n            testId={ `${kebabCase(name)}-field-error-message` }\n        />\n    </FormFieldContainer>;\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback((renderProps: FieldArrayRenderProps) => (\n        <MultiCheckboxFormField\n            id={ id }\n            label={ label }\n            name={ name }\n            onChange={ onChange }\n            options={ options }\n            { ...pick(renderProps, [\n                'form',\n                'pop',\n                'push',\n                'remove',\n            ]) }\n        />\n    ), [\n        id,\n        label,\n        name,\n        onChange,\n        options,\n    ]);\n\n    return <FieldArray\n        name={ name }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormField from './FormField';\nimport Label from './Label';\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    inputId?: string;\n    extraClass?: string;\n    autocomplete?: string;\n    parentFieldName?: string;\n    placeholder?: string;\n    label?: ReactNode;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps>  = ({\n    field: {\n        fieldType,\n        type,\n        secret,\n        name,\n        label: fieldLabel,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    parentFieldName,\n    onChange,\n    placeholder,\n    inputId,\n    autocomplete,\n    label,\n    extraClass,\n}) => {\n    const fieldInputId = inputId || name;\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelComponent = useMemo(() => (\n        <Label htmlFor={ fieldInputId }>\n            { label || fieldLabel }\n            { !required &&\n                <>\n                    { ' ' }\n                    <small className=\"optimizedCheckout-contentSecondary\">\n                        <TranslatedString id=\"common.optional_text\" />\n                    </small>\n                </> }\n        </Label>\n    ), [\n        fieldInputId,\n        fieldLabel,\n        required,\n        label,\n    ]);\n\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.number;\n            }\n\n            return secret ?\n                DynamicFormFieldType.password :\n                DynamicFormFieldType.text;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }, [fieldType, type, secret]);\n\n    const renderInput = useCallback(({ field }: FieldProps<string>) => (\n        <DynamicInput\n            { ...field }\n            autoComplete={ autocomplete }\n            fieldType={ dynamicFormFieldType }\n            id={ fieldInputId }\n            max={ max }\n            maxLength={ maxLength || undefined }\n            min={ min }\n            options={ options && options.items }\n            placeholder={ placeholder || (options && options.helperLabel) }\n            rows={ options && (options as any).rows }\n        />\n    ), [\n        fieldInputId,\n        max,\n        maxLength,\n        min,\n        options,\n        placeholder,\n        dynamicFormFieldType,\n        autocomplete,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field ${extraClass}` }>\n            { fieldType === DynamicFormFieldType.checkbox ?\n                <CheckboxGroupFormField\n                    id={ fieldInputId }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                    options={ (options && options.items) || [] }\n                /> :\n                <FormField\n                    input={ renderInput }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                /> }\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { parseAnchor } from '../common/utility';\n\nimport withLanguage, { WithLanguageProps } from './withLanguage';\nimport { TranslatedStringProps } from './TranslatedString';\n\nexport type TranslatedLinkProps = TranslatedStringProps & {\n    testId?: string;\n    onClick: MouseEventHandler;\n};\n\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\n    data,\n    id,\n    language,\n    onClick,\n    testId,\n}) => {\n    const translatedString = language.translate(id, data);\n    const parsedString = parseAnchor(translatedString);\n\n    return parsedString.length ?\n        <>\n            { parsedString[0] }\n            <a\n                data-test={ testId }\n                href=\"#\"\n                onClick={ preventDefault(onClick) }\n            >\n                { parsedString[1] }\n            </a>\n            { parsedString[2] }\n        </> :\n        <>{ translatedString }</>;\n};\n\nexport default withLanguage(TranslatedLink);\n","import { CustomerAccountRequestBody } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { CreateAccountFormValues } from './getCreateCustomerValidationSchema';\n\nexport default function mapCreateAccountFromFormValues(\n    { acceptsMarketingEmails, customFields, ...values }: CreateAccountFormValues\n): CustomerAccountRequestBody {\n    return {\n        ...values,\n        acceptsMarketingEmails: acceptsMarketingEmails && acceptsMarketingEmails.length > 0,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","// NOTE: This is a legacy regex used to create accounts, more flexible than the current used one\n// we need to keep this regex for login validation as accounts might have been created using this regex\nexport const EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { object, string, ObjectSchema } from 'yup';\n\nimport { EMAIL_REGEXP } from './validationPatterns';\n\nexport interface EmailValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport default function getEmailValidationSchema({\n    language,\n}: EmailValidationSchemaOptions): ObjectSchema<{ email: string }> {\n    return object({\n        email: string()\n            .max(256)\n            .matches(EMAIL_REGEXP, language.translate('customer.email_invalid_error'))\n            .required(language.translate('customer.email_required_error')),\n    });\n}\n","import { FormField, LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, string, ObjectSchema } from 'yup';\n\nimport { getCustomFormFieldsValidationSchema, CustomFormFieldValues, TranslateValidationErrorFunction } from '../formFields';\n\nimport getEmailValidationSchema from './getEmailValidationSchema';\nimport { PasswordRequirements } from './getPasswordRequirements';\n\nexport type CreateAccountFormValues = {\n    firstName: string;\n    lastName: string;\n    email: string;\n    password: string;\n    acceptsMarketingEmails?: string[];\n    token?: string;\n} & CustomFormFieldValues;\n\nexport interface CreateCustomerValidationSchema {\n    formFields: FormField[];\n    language: LanguageService;\n    passwordRequirements: PasswordRequirements;\n}\n\nfunction getTranslateCreateCustomerError(language?: LanguageService): TranslateValidationErrorFunction {\n    return (type, { label, min, max }) => {\n        if (!language) {\n            return;\n        }\n\n        if (type === 'required') {\n            return language.translate('customer.required_error', { label });\n        }\n\n        if (type === 'max' && max) {\n            return language.translate('customer.max_error', { label, max });\n        }\n\n        if (type === 'min' && min) {\n            return language.translate('customer.min_error', { label, min });\n        }\n\n        if (type === 'invalid') {\n            return language.translate('customer.invalid_characters_error', { label });\n        }\n\n        return;\n    };\n}\n\nexport default memoize(function getCreateCustomerValidationSchema({\n    formFields,\n    language,\n    passwordRequirements: { description, numeric, alpha, minLength },\n}: CreateCustomerValidationSchema): ObjectSchema<CreateAccountFormValues> {\n    return object({\n            firstName: string().required(language.translate('address.first_name_required_error')),\n            lastName: string().required(language.translate('address.last_name_required_error')),\n            password: string()\n                .required(description || language.translate('customer.password_required_error'))\n                .matches(numeric, description || language.translate('customer.password_number_required_error'))\n                .matches(alpha, description || language.translate('customer.password_letter_required_error'))\n                .min(minLength, description || language.translate('customer.password_under_minimum_length_error'))\n                .max(100, language.translate('customer.password_over_maximum_length_error')),\n        })\n        .concat(getEmailValidationSchema({ language }))\n        .concat(getCustomFormFieldsValidationSchema({\n            formFields,\n            translate: getTranslateCreateCustomerError(language),\n        }));\n});\n","import { FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { useMemo, FunctionComponent } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { isRequestError } from '../common/error';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset, Form } from '../ui/form';\n\nimport getCreateCustomerValidationSchema, { CreateAccountFormValues } from './getCreateCustomerValidationSchema';\nimport getPasswordRequirements from './getPasswordRequirements';\nimport './CreateAccountForm.scss';\n\nexport interface CreateAccountFormProps {\n    formFields: FormField[];\n    createAccountError?: Error;\n    isCreatingAccount?: boolean;\n    requiresMarketingConsent: boolean;\n    onCancel?(): void;\n    onSubmit?(values: CreateAccountFormValues): void;\n}\n\nconst CreateAccountForm: FunctionComponent<CreateAccountFormProps & WithLanguageProps & FormikProps<CreateAccountFormValues>> = ({\n    formFields,\n    createAccountError,\n    isCreatingAccount,\n    onCancel,\n}) => {\n    const createAccountErrorMessage = useMemo(() => {\n        if (!createAccountError) {\n            return;\n        }\n\n        if (isRequestError(createAccountError) && createAccountError.status === 409) {\n            const splitMessage = createAccountError.message.split(':');\n\n            if (splitMessage.length > 1) {\n                return <TranslatedString\n                    data={ { email:  splitMessage[1].trim() } }\n                    id=\"customer.email_in_use_text\"\n                />;\n            }\n\n            return <TranslatedString id=\"customer.unknown_email_in_use_text\" />;\n        }\n\n        return createAccountError.message;\n    }, [createAccountError]);\n\n    return (<>\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-returning\"\n            testId=\"checkout-customer-returning\"\n        >\n            <Fieldset>\n                { createAccountErrorMessage && <Alert\n                    type={ AlertType.Error }\n                >\n                    { createAccountErrorMessage }\n                </Alert> }\n                <div className=\"create-account-form\">\n                    { formFields.map(field => (\n                        <DynamicFormField\n                            autocomplete={ field.name }\n                            extraClass={ `dynamic-form-field--${field.name}` }\n                            field={ field }\n                            key={ field.id }\n                            parentFieldName={ field.custom ? 'customFields'  : undefined }\n                        />\n                    )) }\n                </div>\n            </Fieldset>\n\n           <div className=\"form-actions\">\n                <Button\n                    disabled={ isCreatingAccount }\n                    id=\"checkout-customer-create\"\n                    testId=\"customer-continue-create\"\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"customer.create_account_action\" />\n                </Button>\n\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    data-test=\"customer-cancel-button\"\n                    href=\"#\"\n                    id=\"checkout-customer-cancel\"\n                    onClick={ preventDefault(onCancel) }\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n            </div>\n        </Form>\n    </>);\n};\n\nexport default withLanguage(withFormik<CreateAccountFormProps & WithLanguageProps, CreateAccountFormValues>({\n    handleSubmit: (values, { props: { onSubmit = noop } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({requiresMarketingConsent}) => ({\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '',\n        customFields: {},\n        acceptsMarketingEmails: requiresMarketingConsent ? [] : ['0'],\n    }),\n    validationSchema: ({\n        language,\n        formFields,\n    }: CreateAccountFormProps & WithLanguageProps) => {\n        const passwordRequirements = formFields.find(({ requirements }) => requirements)?.requirements;\n\n        if (!passwordRequirements) {\n            throw new Error('Password requirements missing');\n        }\n\n        const schema = getCreateCustomerValidationSchema({\n            language,\n            formFields,\n            passwordRequirements: getPasswordRequirements(passwordRequirements),\n        });\n\n        return schema;\n    },\n})(CreateAccountForm));\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\n\nexport interface EmailFieldProps {\n    onChange?(value: string): void;\n}\n\nconst EmailField: FunctionComponent<EmailFieldProps>  = ({\n    onChange,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <TextInput\n            { ...props.field }\n            autoComplete={ props.field.name }\n            id={ props.field.name }\n            type=\"email\"\n        />\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"customer.email_label\" />\n    ), []);\n\n    return <FormField\n        input={ renderInput }\n        labelContent={ labelContent }\n        name=\"email\"\n        onChange={ onChange }\n    />;\n};\n\nexport default memo(EmailField);\n","import { SignInEmail } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { memo, useMemo, FunctionComponent } from 'react';\n\nimport { withLanguage, TranslatedHtml, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingSpinner } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport getEmailValidationSchema from './getEmailValidationSchema';\nimport EmailField from './EmailField';\n\nexport interface EmailLoginFormProps {\n    email?: string;\n    isOpen: boolean;\n    isSendingEmail?: boolean;\n    emailHasBeenRequested?: boolean;\n    sentEmail?: SignInEmail;\n    sentEmailError?: any;\n    onRequestClose?(): void;\n    onSendLoginEmail?(values: EmailLoginFormValues): void;\n}\n\nexport interface EmailLoginFormValues {\n    email: string;\n}\n\nconst EmailLoginForm: FunctionComponent<EmailLoginFormProps & WithLanguageProps & FormikProps<EmailLoginFormValues>> = ({\n    email,\n    isOpen,\n    isSendingEmail = false,\n    emailHasBeenRequested,\n    onRequestClose = noop,\n    sentEmailError,\n    sentEmail,\n    submitForm,\n    values: {\n        email: formEmail,\n    },\n}) => {\n    const modalHeaderStringId = useMemo(() => {\n        if (emailHasBeenRequested) {\n            if (sentEmailError) {\n                return 'common.error_heading';\n            }\n\n            return 'login_email.sent_header';\n        }\n\n        if (email) {\n            return 'login_email.header_with_email';\n        }\n\n        return 'login_email.header';\n    }, [emailHasBeenRequested, sentEmailError, email]);\n\n    const okButton = useMemo(() => (\n        <div className=\"modal-footer\">\n            <Button onClick={ onRequestClose }>\n                <TranslatedString id=\"common.ok_action\" />\n            </Button>\n        </div>\n    ), [onRequestClose]);\n\n    const footer = useMemo(() => {\n        if (sentEmailError && sentEmailError.status === 429) {\n            return okButton;\n        }\n\n        if (emailHasBeenRequested && !sentEmailError) {\n            if (isSendingEmail) {\n                return <LoadingSpinner isLoading />;\n            }\n\n            if (sentEmail && sentEmail.sent_email === 'reset_password') {\n                return okButton;\n            }\n\n            return (\n                <p>\n                    <TranslatedLink\n                        id=\"login_email.resend_link\"\n                        onClick={ submitForm }\n                    />\n                    <TranslatedLink\n                        id=\"login_email.use_password_link\"\n                        onClick={ onRequestClose }\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <div className=\"modal-footer\">\n                <Button\n                    className=\"optimizedCheckout-buttonSecondary\"\n                    onClick={ onRequestClose }\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.go_back\" />\n                </Button>\n                <Button\n                    isLoading={ isSendingEmail }\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"login_email.send\" />\n                </Button>\n            </div>\n        );\n    }, [\n        sentEmailError,\n        emailHasBeenRequested,\n        okButton,\n        submitForm,\n        isSendingEmail,\n        onRequestClose,\n        sentEmail,\n    ]);\n\n    const error = useMemo(() => {\n        if (!sentEmailError) {\n            return null;\n        }\n\n        const { status } = sentEmailError;\n\n        return (\n            <Alert type={ AlertType.Error }>\n                { status === 429 ?\n                    <TranslatedString id=\"login_email.error_temporary_disabled\" /> :\n                    <TranslatedString id={ status === 404 ?\n                        'login_email.error_not_found' :\n                        'login_email.error_server' }\n                    /> }\n            </Alert>\n        );\n    }, [sentEmailError]);\n\n    const form = useMemo(() => {\n        if (sentEmailError && sentEmailError.status === 429) {\n            return null;\n        }\n\n        if (emailHasBeenRequested && sentEmail && !sentEmailError) {\n            const { expiry, sent_email } = sentEmail;\n\n            return (\n                <p>\n                    <TranslatedHtml\n                        data={ {\n                            email: formEmail,\n                            minutes: Math.round(expiry / 60),\n                        } }\n                        id={ sent_email === 'sign_in' ?\n                            'login_email.sent_text' :\n                            'customer.reset_password_before_login_error' }\n                    />\n                </p>\n            );\n        }\n\n        if (emailHasBeenRequested && !sentEmail) {\n            return <EmailField />;\n        }\n\n        return (<>\n            <p>\n                <TranslatedString id=\"login_email.text\" />\n            </p>\n            <EmailField />\n        </>);\n    }, [sentEmailError, emailHasBeenRequested, sentEmail, formEmail]);\n\n    return (\n        <Modal\n            additionalBodyClassName=\"modal--withText\"\n            additionalModalClassName=\"modal--medium\"\n            header={\n                <ModalHeader>\n                    <TranslatedString id={ modalHeaderStringId } />\n                </ModalHeader>\n            }\n            isOpen={ isOpen }\n            onRequestClose={ onRequestClose }\n            shouldShowCloseButton={ true }\n        >\n            <Form>\n                <LoadingSpinner isLoading={ isSendingEmail && !email } />\n                { error }\n                { form }\n                { footer }\n            </Form>\n        </Modal>);\n};\n\nexport default withLanguage(withFormik<EmailLoginFormProps & WithLanguageProps, EmailLoginFormValues>({\n    mapPropsToValues: ({\n        email = '',\n    }) => ({\n        email,\n    }),\n    handleSubmit: (values, { props: { onSendLoginEmail = noop } }) => {\n        onSendLoginEmail(values);\n    },\n    validationSchema: ({ language }: WithLanguageProps) => getEmailValidationSchema({ language }),\n})(memo(EmailLoginForm)));\n","import { withFormik, FormikProps } from 'formik';\nimport React, { memo, FunctionComponent, ReactNode } from 'react';\nimport { object, string } from 'yup';\n\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { getPrivacyPolicyValidationSchema } from '../privacyPolicy';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form, Legend  } from '../ui/form';\n\nimport EmailField from './EmailField';\n// import SubscribeField from './SubscribeField';\n\nexport interface GuestFormProps {\n    canSubscribe: boolean;\n    checkoutButtons?: ReactNode;\n    continueAsGuestButtonLabelId: string;\n    requiresMarketingConsent: boolean;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    isLoading: boolean;\n    privacyPolicyUrl?: string;\n    onChangeEmail(email: string): void;\n    onContinueAsGuest(data: GuestFormValues): void;\n    onShowLogin(): void;\n}\n\nexport interface GuestFormValues {\n    email: string;\n    shouldSubscribe: boolean;\n}\n\nconst GuestForm: FunctionComponent<GuestFormProps & WithLanguageProps & FormikProps<GuestFormValues>> = ({\n    // canSubscribe,\n    checkoutButtons,\n    continueAsGuestButtonLabelId,\n    isLoading,\n    onChangeEmail,\n    // onShowLogin,\n    // privacyPolicyUrl,\n    // requiresMarketingConsent,\n}) => {\n    // const renderField = useCallback((fieldProps: FieldProps<boolean>) => (\n    //     <SubscribeField\n    //         { ...fieldProps }\n    //         requiresMarketingConsent={ requiresMarketingConsent }\n    //     />\n    // ), [\n    //     requiresMarketingConsent,\n    // ]);\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-guest\"\n            testId=\"checkout-customer-guest\"\n        >\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        <TranslatedString id=\"customer.guest_customer_text\" />\n                    </Legend>\n                }\n            >\n                { /* <p>\n                    <TranslatedHtml id=\"customer.checkout_as_guest_text\" />\n                </p> */ }\n\n                <div className=\"customerEmail-container\">\n                    <div className=\"customerEmail-body\">\n                        <EmailField onChange={ onChangeEmail } />\n\n                        { /* { (canSubscribe || requiresMarketingConsent) && <BasicFormField\n                            name=\"shouldSubscribe\"\n                            render={ renderField }\n                        /> } */ }\n\n                        { /* { privacyPolicyUrl && <PrivacyPolicyField\n                            url={ privacyPolicyUrl }\n                        /> } */ }\n                    </div>\n\n                    <div className=\"form-actions customerEmail-action\">\n                        <Button\n                            className=\"customerEmail-button\"\n                            id=\"checkout-customer-continue\"\n                            isLoading={ isLoading }\n                            style={ { display: 'none' } }\n                            testId=\"customer-continue-as-guest-button\"\n                            type=\"submit\"\n                            variant={ ButtonVariant.Primary }\n                        >\n                            <TranslatedString id={ continueAsGuestButtonLabelId } />\n                        </Button>\n                    </div>\n                </div>\n\n                { /* {\n                    !isLoading && <p>\n                        <TranslatedString id=\"customer.login_text\" />\n                        { ' ' }\n                        <a\n                            data-test=\"customer-continue-button\"\n                            id=\"checkout-customer-login\"\n                            onClick={ onShowLogin }\n                        >\n                            <TranslatedString id=\"customer.login_action\" />\n                        </a>\n                    </p>\n                } */ }\n\n                { checkoutButtons }\n            </Fieldset>\n        </Form>\n    );\n};\n\nexport default withLanguage(withFormik<GuestFormProps & WithLanguageProps, GuestFormValues>({\n    mapPropsToValues: ({\n        email = '',\n        defaultShouldSubscribe = false,\n        requiresMarketingConsent,\n    }) => ({\n        email,\n        shouldSubscribe: requiresMarketingConsent ? false : defaultShouldSubscribe,\n        privacyPolicy: false,\n    }),\n    handleSubmit: (values, { props: { onContinueAsGuest } }) => {\n        onContinueAsGuest(values);\n    },\n    validationSchema: ({ language, privacyPolicyUrl }: GuestFormProps & WithLanguageProps) => {\n        const email = string()\n            .email(language.translate('customer.email_invalid_error'))\n            .max(256)\n            .required(language.translate('customer.email_required_error'));\n\n        const baseSchema = object({ email });\n\n        if (privacyPolicyUrl) {\n            return baseSchema.concat(getPrivacyPolicyValidationSchema({\n                isRequired: !!privacyPolicyUrl,\n                language,\n            }));\n        }\n\n        return baseSchema;\n    },\n})(memo(GuestForm)));\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, object, BooleanSchema, ObjectSchema } from 'yup';\n\nexport interface PrivacyPolicyValidatonSchemaProps {\n    isRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getPrivacyPolicyValidationSchema({\n    isRequired,\n    language,\n}: PrivacyPolicyValidatonSchemaProps): ObjectSchema<{ privacyPolicy?: boolean }> {\n    const schemaFields: {\n        privacyPolicy?: BooleanSchema;\n    } = {};\n\n    if (isRequired) {\n        schemaFields.privacyPolicy = boolean()\n            .oneOf([true], language.translate('privacy_policy.required_error'));\n    }\n\n    return object(schemaFields);\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEye: FunctionComponent = () => (\n    <svg\n        viewBox=\"0 0 576 512\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEye);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEyeSlash: FunctionComponent = () => (\n    <svg\n        viewBox=\"0 0 640 512\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M634 471L36 3.51A16 16 0 0 0 13.51 6l-10 12.49A16 16 0 0 0 6 41l598 467.49a16 16 0 0 0 22.49-2.49l10-12.49A16 16 0 0 0 634 471zM296.79 146.47l134.79 105.38C429.36 191.91 380.48 144 320 144a112.26 112.26 0 0 0-23.21 2.47zm46.42 219.07L208.42 260.16C210.65 320.09 259.53 368 320 368a113 113 0 0 0 23.21-2.46zM320 112c98.65 0 189.09 55 237.93 144a285.53 285.53 0 0 1-44 60.2l37.74 29.5a333.7 333.7 0 0 0 52.9-75.11 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64c-36.7 0-71.71 7-104.63 18.81l46.41 36.29c18.94-4.3 38.34-7.1 58.22-7.1zm0 288c-98.65 0-189.08-55-237.93-144a285.47 285.47 0 0 1 44.05-60.19l-37.74-29.5a333.6 333.6 0 0 0-52.89 75.1 32.35 32.35 0 0 0 0 29.19C89.72 376.41 197.08 448 320 448c36.7 0 71.71-7.05 104.63-18.81l-46.41-36.28C359.28 397.2 339.89 400 320 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEyeSlash);\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\nimport { IconEye, IconEyeSlash } from '../ui/icon';\nimport { Toggle } from '../ui/toggle';\n\nexport interface PasswordFieldProps {\n    forgotPasswordUrl?: string;\n}\n\nconst PasswordField: FunctionComponent<PasswordFieldProps> = ({\n    forgotPasswordUrl,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <Toggle openByDefault={ false }>\n            { ({ isOpen, toggle }) => (\n                <div className=\"form-field-password\">\n                    <TextInput\n                        { ...props.field }\n                        additionalClassName=\"form-input--withIcon\"\n                        id={ props.field.name }\n                        type={ isOpen ? 'text' : 'password' }\n                    />\n                    <a className=\"form-toggle-password form-input-icon\" href=\"#\" onClick={ toggle }>\n                        { isOpen ? <IconEye /> : <IconEyeSlash /> }\n                    </a>\n                </div>\n            ) }\n        </Toggle>\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id={ 'customer.password_label' } />\n    ), []);\n\n    const footer = useMemo(() => {\n        if (!forgotPasswordUrl) {\n            return null;\n        }\n\n        return <a\n            data-test=\"forgot-password-link\"\n            href={ forgotPasswordUrl }\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n        >\n            <TranslatedString id=\"customer.forgot_password_action\" />\n        </a>;\n    }, [forgotPasswordUrl]);\n\n    return <FormField\n        footer={ footer }\n        input={ renderInput }\n        labelContent={ labelContent }\n        name=\"password\"\n    />;\n};\n\nexport default memo(PasswordField);\n","import { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedHtml, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport getEmailValidationSchema from './getEmailValidationSchema';\nimport mapErrorMessage from './mapErrorMessage';\nimport CustomerViewType from './CustomerViewType';\nimport EmailField from './EmailField';\nimport PasswordField from './PasswordField';\n\nexport interface LoginFormProps {\n    canCancel?: boolean;\n    continueAsGuestButtonLabelId: string;\n    email?: string;\n    forgotPasswordUrl: string;\n    isSignInEmailEnabled?: boolean;\n    isSendingSignInEmail?: boolean;\n    isSigningIn?: boolean;\n    signInError?: Error;\n    signInEmailError?: Error;\n    viewType?: Omit<CustomerViewType, 'guest'>;\n    passwordlessLogin?: boolean;\n    shouldShowCreateAccountLink?: boolean;\n    onCancel?(): void;\n    onCreateAccount?(): void;\n    onChangeEmail?(email: string): void;\n    onSignIn(data: LoginFormValues): void;\n    onSendLoginEmail?(): void;\n    onContinueAsGuest?(): void;\n}\n\nexport interface LoginFormValues {\n    email: string;\n    password: string;\n}\n\nconst LoginForm: FunctionComponent<LoginFormProps & WithLanguageProps & FormikProps<LoginFormValues>> = ({\n    canCancel,\n    continueAsGuestButtonLabelId,\n    forgotPasswordUrl,\n    email,\n    isSignInEmailEnabled,\n    isSigningIn,\n    language,\n    onCancel = noop,\n    onChangeEmail,\n    onContinueAsGuest,\n    onCreateAccount = noop,\n    onSendLoginEmail = noop,\n    signInError,\n    shouldShowCreateAccountLink,\n    viewType = CustomerViewType.Login,\n}) => {\n    const changeEmailLink = useCallback(() => {\n        if (!email) {\n            return null;\n        }\n\n        return (\n            <p className=\"optimizedCheckout-contentSecondary\">\n                <TranslatedLink\n                    data={ { email } }\n                    id=\"customer.guest_could_login_change_email\"\n                    onClick={ onCancel }\n                    testId=\"change-email\"\n                />\n            </p>\n        );\n    }, [email, onCancel]);\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-returning\"\n            testId=\"checkout-customer-returning\"\n        >\n            <Fieldset legend={\n                <Legend hidden>\n                    <TranslatedString id=\"customer.returning_customer_text\" />\n                </Legend>\n            }\n            >\n                { signInError && <Alert\n                    testId=\"customer-login-error-message\"\n                    type={ AlertType.Error }\n                >\n                    { mapErrorMessage(signInError, key => language.translate(key)) }\n                </Alert> }\n\n                { viewType === CustomerViewType.SuggestedLogin &&\n                    <Alert type={ AlertType.Info }>\n                        <TranslatedHtml\n                            data={ { email } }\n                            id=\"customer.guest_could_login\"\n                        />\n                    </Alert> }\n\n                { viewType === CustomerViewType.Login && shouldShowCreateAccountLink && <p>\n                    <TranslatedLink\n                        id=\"customer.create_account_to_continue_text\"\n                        onClick={ onCreateAccount }\n                    />\n                </p> }\n\n                { viewType === CustomerViewType.CancellableEnforcedLogin &&\n                    <Alert type={ AlertType.Info }>\n                        <TranslatedHtml\n                            data={ { email } }\n                            id=\"customer.guest_must_login\"\n                        />\n                    </Alert> }\n\n                { viewType === CustomerViewType.EnforcedLogin &&\n                    <Alert type={ AlertType.Error }>\n                        <TranslatedLink\n                            id=\"customer.guest_temporary_disabled\"\n                            onClick={ onCreateAccount }\n                        />\n                    </Alert> }\n\n                { (viewType === CustomerViewType.Login || viewType === CustomerViewType.EnforcedLogin) &&\n                    <EmailField onChange={ onChangeEmail } /> }\n\n                <PasswordField forgotPasswordUrl={ isSignInEmailEnabled ? undefined : forgotPasswordUrl } />\n\n                { isSignInEmailEnabled && <p>\n                    <TranslatedLink\n                        id=\"login_email.link\"\n                        onClick={ onSendLoginEmail }\n                        testId=\"customer-signin-link\"\n                    />\n                </p> }\n\n                <div className=\"form-actions\">\n                    <Button\n                        disabled={ isSigningIn }\n                        id=\"checkout-customer-continue\"\n                        testId=\"customer-continue-button\"\n                        type=\"submit\"\n                        variant={ ButtonVariant.Primary }\n                    >\n                        <TranslatedString id=\"customer.sign_in_action\" />\n                    </Button>\n\n                    { viewType === CustomerViewType.SuggestedLogin && <a\n                        className=\"button optimizedCheckout-buttonSecondary\"\n                        data-test=\"customer-guest-continue\"\n                        href=\"#\"\n                        id=\"checkout-guest-continue\"\n                        onClick={ preventDefault(onContinueAsGuest) }\n                    >\n                        <TranslatedString id={ continueAsGuestButtonLabelId } />\n                    </a> }\n\n                    { canCancel &&\n                        viewType !== CustomerViewType.EnforcedLogin &&\n                        viewType !== CustomerViewType.SuggestedLogin &&\n                        <a\n                            className=\"button optimizedCheckout-buttonSecondary\"\n                            data-test=\"customer-cancel-button\"\n                            href=\"#\"\n                            id=\"checkout-customer-cancel\"\n                            onClick={ preventDefault(onCancel) }\n                        >\n                            <TranslatedString id={ viewType === CustomerViewType.CancellableEnforcedLogin ?\n                                'login_email.use_another_email' :\n                                'common.cancel_action' }\n                            />\n                        </a> }\n                </div>\n\n                { viewType === CustomerViewType.SuggestedLogin && changeEmailLink() }\n            </Fieldset>\n        </Form>);\n};\n\nexport default withLanguage(withFormik<LoginFormProps & WithLanguageProps, LoginFormValues>({\n    mapPropsToValues: ({\n        email = '',\n    }) => ({\n        email,\n        password: '',\n    }),\n    handleSubmit: (values, { props: { onSignIn } }) => {\n        onSignIn(values);\n    },\n    validationSchema: ({ language }: LoginFormProps & WithLanguageProps) =>\n        getEmailValidationSchema({ language }).concat(object({\n            password: string()\n                .required(language.translate('customer.password_required_error')),\n        })),\n})(memo(LoginForm)));\n","export default function mapErrorMessage(\n    error: any, // TODO: Export `RequestError`\n    translate: (key: string) => string\n): string {\n    const type = error.body && error.body.type;\n\n    switch (type) {\n    case 'throttled_login':\n        return translate('customer.sign_in_throttled_error');\n\n    case 'reset_password_before_login':\n        return translate('customer.reset_password_before_login_error');\n\n    default:\n        return translate('customer.sign_in_error');\n    }\n}\n","import { CheckoutSelectors, CustomerAccountRequestBody, CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, ExecutePaymentMethodCheckoutOptions, FormField, GuestCredentials, SignInEmail, StoreConfig } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { CreateAccountFormValues } from './getCreateCustomerValidationSchema';\nimport mapCreateAccountFromFormValues from './mapCreateAccountFromFormValues';\nimport CheckoutButtonList from './CheckoutButtonList';\nimport CreateAccountForm from './CreateAccountForm';\nimport CustomerViewType from './CustomerViewType';\nimport EmailLoginForm, { EmailLoginFormValues } from './EmailLoginForm';\nimport GuestForm, { GuestFormValues } from './GuestForm';\nimport LoginForm from './LoginForm';\n\nexport interface CustomerProps {\n    viewType: CustomerViewType;\n    isEmbedded?: boolean;\n    checkEmbeddedSupport?(methodIds: string[]): void;\n    onChangeViewType?(viewType: CustomerViewType): void;\n    onAccountCreated?(): void;\n    onContinueAsGuest?(): void;\n    onContinueAsGuestError?(error: Error): void;\n    onReady?(): void;\n    onSignIn?(): void;\n    onSignInError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\nexport interface WithCheckoutCustomerProps {\n    canSubscribe: boolean;\n    customerAccountFields: FormField[];\n    checkoutButtonIds: string[];\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    firstName?: string;\n    forgotPasswordUrl: string;\n    isContinuingAsGuest: boolean;\n    isCreatingAccount: boolean;\n    isExecutingPaymentMethodCheckout: boolean;\n    isGuestEnabled: boolean;\n    isInitializing: boolean;\n    isSendingSignInEmail: boolean;\n    isSignInEmailEnabled: boolean;\n    isSigningIn: boolean;\n    privacyPolicyUrl?: string;\n    providerWithCustomCheckout?: string;\n    requiresMarketingConsent: boolean;\n    signInEmail?: SignInEmail;\n    signInEmailError?: Error;\n    isAccountCreationEnabled: boolean;\n    createAccountError?: Error;\n    signInError?: Error;\n    clearError(error: Error): Promise<CheckoutSelectors>;\n    continueAsGuest(credentials: GuestCredentials): Promise<CheckoutSelectors>;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    executePaymentMethodCheckout(options: ExecutePaymentMethodCheckoutOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    sendLoginEmail(params: { email: string }): Promise<CheckoutSelectors>;\n    signIn(credentials: CustomerCredentials): Promise<CheckoutSelectors>;\n    createAccount(values: CustomerAccountRequestBody): Promise<CheckoutSelectors>;\n}\n\nexport interface CustomerState {\n    isEmailLoginFormOpen: boolean;\n    isReady: boolean;\n    hasRequestedLoginEmail: boolean;\n}\n\nclass Customer extends Component<CustomerProps & WithCheckoutCustomerProps, CustomerState> {\n    state: CustomerState = {\n        isEmailLoginFormOpen: false,\n        isReady: false,\n        hasRequestedLoginEmail: false,\n    };\n\n    private draftEmail?: string;\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializeCustomer,\n            email,\n            onReady = noop,\n            onUnhandledError = noop,\n            providerWithCustomCheckout,\n        } = this.props;\n\n        this.draftEmail = email;\n\n        try {\n            await initializeCustomer({ methodId: providerWithCustomCheckout });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n\n        this.setState({ isReady: true });\n\n        onReady();\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializeCustomer = noop,\n            providerWithCustomCheckout,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitializeCustomer({ methodId: providerWithCustomCheckout });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { viewType } = this.props;\n        const { isEmailLoginFormOpen, isReady } = this.state;\n        const shouldRenderGuestForm = viewType === CustomerViewType.Guest;\n        const shouldRenderCreateAccountForm = viewType === CustomerViewType.CreateAccount;\n        const shouldRenderLoginForm = !shouldRenderGuestForm && !shouldRenderCreateAccountForm;\n\n        return (\n            <LoadingOverlay\n                isLoading={ !isReady }\n                unmountContentWhenLoading\n            >\n                { isEmailLoginFormOpen && this.renderEmailLoginLinkForm() }\n                { shouldRenderLoginForm && this.renderLoginForm() }\n                { shouldRenderGuestForm && this.renderGuestForm() }\n                { shouldRenderCreateAccountForm && this.renderCreateAccountForm() }\n            </LoadingOverlay>\n        );\n    }\n\n    private renderGuestForm(): ReactNode {\n        const {\n            canSubscribe,\n            checkEmbeddedSupport,\n            checkoutButtonIds,\n            defaultShouldSubscribe,\n            deinitializeCustomer,\n            email,\n            initializeCustomer,\n            isContinuingAsGuest = false,\n            isExecutingPaymentMethodCheckout = false,\n            isInitializing = false,\n            privacyPolicyUrl,\n            providerWithCustomCheckout,\n            requiresMarketingConsent,\n            onUnhandledError = noop,\n        } = this.props;\n\n        return (\n            <GuestForm\n                canSubscribe={ canSubscribe }\n                checkoutButtons={\n                    <CheckoutButtonList\n                        checkEmbeddedSupport={ checkEmbeddedSupport }\n                        deinitialize={ deinitializeCustomer }\n                        initialize={ initializeCustomer }\n                        isInitializing={ isInitializing }\n                        methodIds={ checkoutButtonIds }\n                        onError={ onUnhandledError }\n                    />\n                }\n                continueAsGuestButtonLabelId={ !!providerWithCustomCheckout ? 'customer.continue' : 'customer.continue_as_guest_action' }\n                defaultShouldSubscribe={ defaultShouldSubscribe }\n                email={ this.draftEmail || email }\n                isLoading={ isContinuingAsGuest || isInitializing || isExecutingPaymentMethodCheckout }\n                onChangeEmail={ this.handleChangeEmail }\n                onContinueAsGuest={ this.handleContinueAsGuest }\n                onShowLogin={ this.handleShowLogin }\n                privacyPolicyUrl={ privacyPolicyUrl }\n                requiresMarketingConsent={ requiresMarketingConsent }\n            />\n        );\n    }\n\n    private renderEmailLoginLinkForm(): ReactNode {\n        const {\n            isEmailLoginFormOpen,\n            hasRequestedLoginEmail,\n        } = this.state;\n\n        const {\n            isSendingSignInEmail,\n            signInEmailError,\n            signInEmail,\n        } = this.props;\n\n        return (\n            <EmailLoginForm\n                email={ this.draftEmail }\n                emailHasBeenRequested={ hasRequestedLoginEmail }\n                isOpen={ isEmailLoginFormOpen }\n                isSendingEmail={ isSendingSignInEmail }\n                onRequestClose={ this.closeEmailLoginFormForm }\n                onSendLoginEmail={ this.handleSendLoginEmail }\n                sentEmail={ signInEmail }\n                sentEmailError={ signInEmailError }\n            />\n        );\n    }\n\n    private closeEmailLoginFormForm: () => void = () => {\n        this.setState({\n            isEmailLoginFormOpen: false,\n            hasRequestedLoginEmail: false,\n        });\n    };\n\n    private renderCreateAccountForm(): ReactNode {\n        const {\n            customerAccountFields,\n            isCreatingAccount,\n            createAccountError,\n            requiresMarketingConsent,\n        } = this.props;\n\n        return (\n            <CreateAccountForm\n                createAccountError={ createAccountError }\n                formFields={ customerAccountFields }\n                isCreatingAccount={ isCreatingAccount }\n                onCancel={ this.handleCancelCreateAccount }\n                onSubmit={ this.handleCreateAccount }\n                requiresMarketingConsent={ requiresMarketingConsent }\n            />\n        );\n    }\n\n    private renderLoginForm(): ReactNode {\n        const {\n            isEmbedded,\n            email,\n            forgotPasswordUrl,\n            isSignInEmailEnabled,\n            isGuestEnabled,\n            isSendingSignInEmail,\n            isSigningIn,\n            isAccountCreationEnabled,\n            providerWithCustomCheckout,\n            signInError,\n            viewType,\n        } = this.props;\n\n        return (\n            <LoginForm\n                canCancel={ isGuestEnabled }\n                continueAsGuestButtonLabelId={ !!providerWithCustomCheckout ? 'customer.continue' : 'customer.continue_as_guest_action' }\n                email={ this.draftEmail || email }\n                forgotPasswordUrl={ forgotPasswordUrl }\n                isSendingSignInEmail={ isSendingSignInEmail }\n                isSignInEmailEnabled={ isSignInEmailEnabled && !isEmbedded }\n                isSigningIn={ isSigningIn }\n                onCancel={ this.handleCancelSignIn }\n                onChangeEmail={ this.handleChangeEmail }\n                onContinueAsGuest={ this.executePaymentMethodCheckoutOrContinue }\n                onCreateAccount={ this.showCreateAccount }\n                onSendLoginEmail={ this.handleEmailLoginClicked }\n                onSignIn={ this.handleSignIn }\n                shouldShowCreateAccountLink={ isAccountCreationEnabled }\n                signInError={ signInError }\n                viewType={ viewType }\n            />\n        );\n    }\n\n    private handleEmailLoginClicked: () => void = async () => {\n        const { viewType } = this.props;\n\n        try {\n            if (viewType !== CustomerViewType.Login && this.draftEmail) {\n                await this.handleSendLoginEmail({ email: this.draftEmail });\n            }\n        } finally {\n            this.setState({\n                isEmailLoginFormOpen: true,\n            });\n        }\n    };\n\n    private handleSendLoginEmail: (values: EmailLoginFormValues) => Promise<void> = async values => {\n        const {\n            sendLoginEmail,\n        } = this.props;\n\n        try {\n            await sendLoginEmail(values);\n        } finally {\n            this.setState({\n                hasRequestedLoginEmail: true,\n            });\n        }\n    };\n\n    private handleContinueAsGuest: (formValues: GuestFormValues) => Promise<void> = async formValues => {\n        const {\n            canSubscribe,\n            continueAsGuest,\n            onChangeViewType = noop,\n            onContinueAsGuest = noop,\n            onContinueAsGuestError = noop,\n        } = this.props;\n\n        const email = formValues.email.trim();\n        try {\n            const { data } = await continueAsGuest({\n                email,\n                acceptsMarketingNewsletter: canSubscribe && formValues.shouldSubscribe ? true : undefined,\n                acceptsAbandonedCartEmails: formValues.shouldSubscribe ? true : undefined,\n            });\n\n            const customer = data.getCustomer();\n\n            if (customer && customer.shouldEncourageSignIn && customer.isGuest) {\n               return onChangeViewType(CustomerViewType.SuggestedLogin);\n            }\n\n            await this.executePaymentMethodCheckoutOrContinue();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            if (error.type === 'update_subscriptions' || error.type === 'payment_method_client_invalid') {\n                this.draftEmail = undefined;\n\n                onContinueAsGuest();\n            }\n\n            if (error.status === 429) {\n                return onChangeViewType(CustomerViewType.EnforcedLogin);\n            }\n\n            if (error.status === 403) {\n                return onChangeViewType(CustomerViewType.CancellableEnforcedLogin);\n            }\n\n            onContinueAsGuestError(error);\n        }\n    };\n\n    private handleSignIn: (credentials: CustomerCredentials) => Promise<void> = async credentials => {\n        const {\n            signIn,\n            onSignIn = noop,\n            onSignInError = noop,\n        } = this.props;\n\n        try {\n            await signIn(credentials);\n            onSignIn();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            onSignInError(error);\n        }\n    };\n\n    private handleCreateAccount: (values: CreateAccountFormValues) => void = async values => {\n        const {\n            createAccount = noop,\n            onAccountCreated = noop,\n        } = this.props;\n\n        await createAccount(mapCreateAccountFromFormValues(values));\n\n        onAccountCreated();\n    };\n\n    private showCreateAccount: () => void = () => {\n        const {\n            onChangeViewType = noop,\n        } = this.props;\n\n        onChangeViewType(CustomerViewType.CreateAccount);\n    };\n\n    private handleCancelCreateAccount: () => void = () => {\n        const {\n            clearError,\n            onChangeViewType = noop,\n            createAccountError,\n        } = this.props;\n\n        if (createAccountError) {\n            clearError(createAccountError);\n        }\n\n        onChangeViewType(CustomerViewType.Login);\n    };\n\n    private handleCancelSignIn: () => void = () => {\n        const {\n            clearError,\n            onChangeViewType = noop,\n            signInError,\n        } = this.props;\n\n        if (signInError) {\n            clearError(signInError);\n        }\n\n        onChangeViewType(CustomerViewType.Guest);\n    };\n\n    private handleChangeEmail: (email: string) => void = email => {\n        this.draftEmail = email;\n    };\n\n    private handleShowLogin: () => void = () => {\n        const { onChangeViewType = noop } = this.props;\n\n        onChangeViewType(CustomerViewType.Login);\n    };\n\n    private executePaymentMethodCheckoutOrContinue: () => void = async () => {\n        const {\n            executePaymentMethodCheckout,\n            onContinueAsGuest = noop,\n            providerWithCustomCheckout,\n        } = this.props;\n\n        if (providerWithCustomCheckout) {\n            await executePaymentMethodCheckout({ methodId: providerWithCustomCheckout, continueWithCheckoutCallback: onContinueAsGuest });\n        } else {\n            onContinueAsGuest();\n        }\n    };\n}\n\nexport function mapToWithCheckoutCustomerProps(\n    { checkoutService, checkoutState }: CheckoutContextProps\n): WithCheckoutCustomerProps | null {\n    const {\n        data: { getBillingAddress, getCustomerAccountFields, getCheckout, getCustomer, getSignInEmail, getConfig },\n        errors: { getSignInError, getSignInEmailError, getCreateCustomerAccountError },\n        statuses: { isContinuingAsGuest, isExecutingPaymentMethodCheckout, isInitializingCustomer, isSigningIn, isSendingSignInEmail, isCreatingCustomerAccount },\n    } = checkoutState;\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const signInEmail = getSignInEmail();\n    const config = getConfig();\n\n    if (!checkout || !config) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            privacyPolicyUrl,\n            requiresMarketingConsent,\n            isSignInEmailEnabled,\n            isAccountCreationEnabled,\n        },\n    } = config as StoreConfig & { checkoutSettings: { isAccountCreationEnabled: boolean } };\n\n    return {\n        customerAccountFields: getCustomerAccountFields(),\n        canSubscribe: config.shopperConfig.showNewsletterSignup,\n        checkoutButtonIds: config.checkoutSettings.remoteCheckoutProviders,\n        clearError: checkoutService.clearError,\n        createAccount: checkoutService.createCustomerAccount,\n        continueAsGuest: checkoutService.continueAsGuest,\n        sendLoginEmail: checkoutService.sendSignInEmail,\n        defaultShouldSubscribe: config.shopperConfig.defaultNewsletterSignup,\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        executePaymentMethodCheckout: checkoutService.executePaymentMethodCheckout,\n        email: billingAddress?.email || customer?.email,\n        firstName: customer?.firstName,\n        forgotPasswordUrl: config.links.forgotPasswordLink,\n        initializeCustomer: checkoutService.initializeCustomer,\n        isCreatingAccount: isCreatingCustomerAccount(),\n        createAccountError: getCreateCustomerAccountError(),\n        isContinuingAsGuest: isContinuingAsGuest(),\n        isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(),\n        isInitializing:  isInitializingCustomer(),\n        isSignInEmailEnabled,\n        isAccountCreationEnabled,\n        isGuestEnabled: config.checkoutSettings.guestCheckoutEnabled,\n        isSigningIn: isSigningIn(),\n        isSendingSignInEmail: isSendingSignInEmail(),\n        signInEmail,\n        signInEmailError: getSignInEmailError(),\n        privacyPolicyUrl,\n        providerWithCustomCheckout: config.checkoutSettings.providerWithCustomCheckout || undefined,\n        requiresMarketingConsent,\n        signIn: checkoutService.signInCustomer,\n        signInError: getSignInError(),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutCustomerProps)(Customer);\n"],"sourceRoot":""}